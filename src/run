#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Take a CSV file containing title and URIs associated to a DOI and submit new
findings to the identifier translation service.

usage: python run

(c) Javier Arias, Open Book Publishers, October 2018
Use of this software is governed by the terms of the MIT license

Dependencies:
  httplib2==0.10.3
  urllib3==1.20
"""

import os
import sys
import csv
import json
import urllib2
import httplib2

CSV_LOC_URL       = os.environ['CSV_LOC_URL']
CSV_TITLE_COL     = int(os.environ['CSV_TITLE_COL'])
CSV_DOI_COL       = int(os.environ['CSV_DOI_COL'])
CSV_URI_START_COL = int(os.environ['CSV_URI_START_COL'])
CSV_CANONICAL_END = int(os.environ['CSV_CANONICAL_END'])
DEFAULT_TYPE      = os.environ['DEFAULT_TYPE']
URI_API_ENDP      = os.environ['URI_API_ENDP']
URI_API_USER      = os.environ['URI_API_USER']
URI_API_PASS      = os.environ['URI_API_PASS']
AUTH_API_ENDP     = os.environ['AUTH_API_ENDP']
URI_API_WORKS     = os.environ['URI_API_WORKS']
URI_API_URIS      = os.environ['URI_API_URIS']
URI_API_TITLES    = os.environ['URI_API_TITLES']


def get_token(url, email, passwd):
    h = httplib2.Http()
    credentials = {'email': email, 'password': passwd}
    headers = {'content-type': 'application/json'}
    res, content = h.request(url, 'POST', json.dumps(credentials), headers)
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)
    return json.loads(content)['data'][0]['token']


def get_from_doi(doi):
    url = URI_API_ENDP + "?uri=" + doi
    h = httplib2.Http()
    headers = {'Authorization': 'Bearer ' + API_JWTOKEN}
    res, content = h.request(url, 'GET', headers=headers)
    return json.loads(content)['data']


def is_doi_unique(doi):
    url = '%s?uri=%s&filter=uri_scheme:info:doi&strict=true' % (URI_API_ENDP,
                                                                doi)
    h = httplib2.Http()
    headers = {'Authorization': 'Bearer ' + API_JWTOKEN}
    res, content = h.request(url, 'GET', headers=headers)
    try:
        assert json.loads(content)['count'] <= 1
    except AssertionError:
        r = json.loads(content)
        m = "%s: %s" % (r['message'], r['parameters']['uri'])
        print >>sys.stderr, m
        return False
    return True


def submit(url, data):
    h = httplib2.Http()
    headers = {'content-type': 'application/json',
               'Authorization': 'Bearer ' + API_JWTOKEN}
    res, content = h.request(url, 'POST', json.dumps(data), headers)
    try:
        assert res.status == 200
    except AssertionError:
        sys.stderr.write(content)
        sys.exit(1)


def get_uuid_from_uris(uris):
    uuid = ''
    for uri in uris:
        assert uuid == '' or uuid == uri['work']['UUID']
        uuid = uri['work']['UUID']
    return uuid


def get_uri_from_uris(uri, uris):
    for e in uris:
        if e['URI'] == uri:
            return e['URI']
    return ''


def standarise_uri(uri, canonical):
    return {'URI': uri, 'canonical': canonical}


def standarise_uris(uris):
    out = []
    for i, val in enumerate(uris):
        # canonicalise all columns from CSV_URI_START_COL to CSV_CANONICAL_END
        # (inclusive). If yoy dont' want canonicals, set CSV_CANONICAL_END=-1
        canonical = "true" if i < CSV_CANONICAL_END else "false"
        out.append(standarise_uri(val, canonical))
    return out


def get_csv():
    return urllib2.urlopen(CSV_LOC_URL)


def process_csv(mapping_file):
    buff = csv.reader(mapping_file)
    for row in buff:
        title = row[CSV_TITLE_COL]
        doi = row[CSV_DOI_COL]
        input_uris = standarise_uris(row[CSV_URI_START_COL:])

        try:
            assert title and doi
            # make sure this doi corresponds to a single work
            assert is_doi_unique(doi)
        except AssertionError:
            continue

        try:
            uris = get_from_doi(doi)
            uuid = get_uuid_from_uris(uris)
            assert uris and uuid
        except AssertionError:
            # add new work
            work = {'title': [title], 'type': DEFAULT_TYPE, 'URI': input_uris}
            submit(URI_API_WORKS, work)
            continue

        # insert input URIs if not already in database
        for uri in input_uris:
            candidate = get_uri_from_uris(uri['URI'], uris)
            try:
                assert candidate == ''
            except AssertionError:
                continue
            new_uri = {'UUID': uuid, 'URI': uri['URI'],
                       'canonical': uri['canonical']}
            submit(URI_API_URIS, new_uri)
        # now submit the input title in case it's been updated
        submit(URI_API_TITLES, {'UUID': uuid, 'title': title})


def run():
    assert API_JWTOKEN
    mapping_file = get_csv()
    assert mapping_file
    process_csv(mapping_file)


API_JWTOKEN = get_token(AUTH_API_ENDP, URI_API_USER, URI_API_PASS)


if __name__ == '__main__':
    run()
